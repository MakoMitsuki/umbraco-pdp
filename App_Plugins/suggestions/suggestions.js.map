{"version":3,"file":"suggestions.js","sources":["../../suggestions/src/suggestions-property-editor-ui.element.ts"],"sourcesContent":["import { LitElement, html, css, customElement, property, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbPropertyEditorUiElement, UmbPropertyValueChangeEvent } from \"@umbraco-cms/backoffice/property-editor\";\n\n@customElement('my-suggestions-property-editor-ui')\nexport default class MySuggestionsPropertyEditorUIElement extends LitElement implements UmbPropertyEditorUiElement {\n    @property({ type: String })\n    public value = \"\";\n\n    @state()\n      private _suggestions = [\n        'You should take a break',\n        'I suggest that you visit the Eiffel Tower',\n        'How about starting a book club today or this week?',\n        'Are you hungry?',\n      ];\n\n      #onInput(e: InputEvent) {\n        this.value = (e.target as HTMLInputElement).value;\n        this.#dispatchChangeEvent();\n      }\n    \n      #dispatchChangeEvent() {\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\n      }\n\n      #onSuggestion() {\n        const randomIndex = (this._suggestions.length * Math.random()) | 0;\n        this.value = this._suggestions[randomIndex];\n        this.#dispatchChangeEvent();\n      }\n\n    render() {\n        return html`\n      <uui-input\n        id=\"suggestion-input\"\n        class=\"element\"\n        label=\"text input\"\n        .value=${this.value || \"\"}\n        @input=${this.#onInput}\n      >\n      </uui-input>\n      <div id=\"wrapper\">\n        <uui-button\n          id=\"suggestion-button\"\n          class=\"element\"\n          look=\"primary\"\n          label=\"give me suggestions\"\n          @click=${this.#onSuggestion}\n          >\n            Give me suggestions!\n          </uui-button>\n        <uui-button\n          id=\"suggestion-trimmer\"\n          class=\"element\"\n          look=\"outline\"\n          label=\"Trim text\"\n        >\n          Trim text\n        </uui-button>\n      </div>\n    `;\n\n    }\n\n    static styles = [\n        css`\n          #wrapper {\n            margin-top: 10px;\n            display: flex;\n            gap: 10px;\n          }\n          .element {\n            width: 100%;\n          }\n        `,\n      ];\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'my-suggestions-property-editor-ui': MySuggestionsPropertyEditorUIElement;\n    }\n}"],"names":["_MySuggestionsPropertyEditorUIElement_instances","onInput_fn","dispatchChangeEvent_fn","onSuggestion_fn","MySuggestionsPropertyEditorUIElement","LitElement","__privateAdd","html","__privateMethod","e","UmbPropertyValueChangeEvent","randomIndex","css","__decorateClass","property","state","customElement"],"mappings":";;;;;;;;8OAAAA,GAAAC,GAAAC,GAAAC;AAIqB,IAAAC,IAArB,cAAkEC,EAAiD;AAAA,EAAnH,cAAA;AAAA,UAAA,GAAA,SAAA,GAAAC,EAAA,MAAAN,CAAA,GAEI,KAAO,QAAQ,IAGb,KAAQ,eAAe;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA,EAiBF,SAAS;AACE,WAAAO;AAAA;AAAA;AAAA;AAAA;AAAA,iBAKE,KAAK,SAAS,EAAE;AAAA,iBAChBC,QAAKR,GAAQC,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBASXO,QAAKR,GAAaG,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AA6BrC;AAxEAH,IAAA,oBAAA,QAAA;AAYMC,IAAQ,SAACQ,GAAe;AACjB,OAAA,QAASA,EAAE,OAA4B,OAC5CD,EAAA,MAAKR,GAALE,CAAA,EAAA,KAAA,IAAA;AACF;AAEAA,IAAoB,WAAG;AAChB,OAAA,cAAc,IAAIQ,GAA6B;AACtD;AAEAP,IAAa,WAAG;AACd,QAAMQ,IAAe,KAAK,aAAa,SAAS,KAAK,WAAY;AAC5D,OAAA,QAAQ,KAAK,aAAaA,CAAW,GAC1CH,EAAA,MAAKR,GAALE,CAAA,EAAA,KAAA,IAAA;AACF;AAzBeE,EA4DV,SAAS;AAAA,EACZQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUF;AArEKC,EAAA;AAAA,EADNC,EAAS,EAAE,MAAM,OAAQ,CAAA;AAAA,GADTV,EAEV,WAAA,SAAA,CAAA;AAGGS,EAAA;AAAA,EADTE,EAAM;AAAA,GAJUX,EAKP,WAAA,gBAAA,CAAA;AALOA,IAArBS,EAAA;AAAA,EADCG,EAAc,mCAAmC;AAAA,GAC7BZ,CAAA;"}